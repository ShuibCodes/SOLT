{"ast":null,"code":"var _jsxFileName = \"/Users/shuibabdillahi/Desktop/SOLT/src/Game/TicTacToe.js\";\nimport React, { useState } from 'react';\nimport '../Game/TicTacToe.css';\nimport Modal from '../extras/modal';\n\nconst TicTacToe = () => {\n  const [turn, setTurn] = useState('x');\n  const [cells, setCells] = useState(Array(9).fill(''));\n  const [winner, setWinner] = useState();\n\n  const checkForWinner = squares => {\n    // arry of winning combos \n    let combos = {\n      across: [[0, 1, 2], [3, 4, 5], [6, 7, 8]],\n      down: [[0, 3, 6], [1, 4, 7], [2, 5, 8]],\n      diagnol: [[0, 4, 8], [2, 4, 6]]\n    }; // checking if there is a winning combo\n\n    for (let combo in combos) {\n      combos[combo].forEach(pattern => {\n        if (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {// do nothing\n        } else if ( // all 3 squares are the same letter\n        squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n          setWinner(squares[pattern[0]]);\n        }\n      });\n    }\n  };\n\n  const handleClick = num => {\n    if (cells[num] !== '') {\n      alert('already clicked');\n      return;\n    }\n\n    let squares = [...cells];\n\n    if (turn === 'x') {\n      squares[num] = 'x';\n      setTurn('o');\n    } else {\n      squares[num] = 'o';\n      setTurn('x');\n    }\n\n    checkForWinner(squares);\n    setCells(squares);\n  };\n\n  const handleRestart = () => {\n    setWinner(null);\n    setCells(Array(9).fill(''));\n  };\n\n  const Cell = ({\n    num\n  }) => {\n    return /*#__PURE__*/React.createElement(\"td\", {\n      onClick: () => handleClick(num),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 10\n      }\n    }, cells[num]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"font-bold text-4xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, \"Turn: \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }\n  }, \" \", turn))), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Cell, {\n    style: {\n      textAlign: 'center'\n    },\n    num: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Cell, {\n    num: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Cell, {\n    num: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Cell, {\n    num: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Cell, {\n    num: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Cell, {\n    num: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Cell, {\n    num: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Cell, {\n    num: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Cell, {\n    num: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  })))), winner && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    theWinner: winner,\n    restart: handleRestart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"w-100 inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm\",\n    onClick: () => handleRestart(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }\n  }, \"Start Over?\"));\n};\n\nexport default TicTacToe;","map":{"version":3,"sources":["/Users/shuibabdillahi/Desktop/SOLT/src/Game/TicTacToe.js"],"names":["React","useState","Modal","TicTacToe","turn","setTurn","cells","setCells","Array","fill","winner","setWinner","checkForWinner","squares","combos","across","down","diagnol","combo","forEach","pattern","handleClick","num","alert","handleRestart","Cell","padding","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport '../Game/TicTacToe.css';\nimport Modal from '../extras/modal';\n\nconst TicTacToe = () => {\n\tconst [turn, setTurn] = useState('x');\n\tconst [cells, setCells] = useState(Array(9).fill(''));\n\tconst [winner, setWinner] = useState();\n\n\tconst checkForWinner = (squares) => {\n        \n        // arry of winning combos \n\tlet combos = {\n\t\t\tacross: [\n\t\t\t\t[0, 1, 2],\n\t\t\t\t[3, 4, 5],\n\t\t\t\t[6, 7, 8],\n\t\t\t],\n\t\t\tdown: [\n\t\t\t\t[0, 3, 6],\n\t\t\t\t[1, 4, 7],\n\t\t\t\t[2, 5, 8],\n\t\t\t],\n\t\t\tdiagnol: [\n\t\t\t\t[0, 4, 8],\n\t\t\t\t[2, 4, 6],\n\t\t\t],\n\t\t};\n\n        // checking if there is a winning combo\n\n\t\tfor (let combo in combos) {\n\t\t\tcombos[combo].forEach((pattern) => {\n\t\t\t\tif (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {\n\t\t\t\t\t// do nothing\n                } else if // all 3 squares are the same letter\n                \n                (squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n\t\t\t\t\tsetWinner(squares[pattern[0]]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n    \n\tconst handleClick = (num) => {\n\t\tif (cells[num] !== '') {\n\t\t\talert('already clicked');\n\t\t\treturn;\n\t\t}\n\n\t\tlet squares = [...cells];\n\n\t\tif (turn === 'x') {\n\t\t\tsquares[num] = 'x';\n\t\t\tsetTurn('o');\n\t\t} else {\n\t\t\tsquares[num] = 'o';\n\t\t\tsetTurn('x');\n\t\t}\n\n\t\tcheckForWinner(squares);\n\t\tsetCells(squares);\n\t};\n\n\tconst handleRestart = () => {\n\t\tsetWinner(null);\n\t\tsetCells(Array(9).fill(''));\n\t};\n\n\tconst Cell = ({ num }) => {\n\t\treturn <td onClick={() => handleClick(num)}>{cells[num]}</td>;\n\t};\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div style={{ padding: '20px' }}>\n\t\t\t\t<h1 className=\"font-bold text-4xl\">\n\t\t\t\t\tTurn: <span> {turn}</span>\n\t\t\t\t</h1>\n\t\t\t</div>\n\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<Cell style={{ textAlign: 'center' }} num={0} />\n\t\t\t\t\t\t<Cell num={1} />\n\t\t\t\t\t\t<Cell num={2} />\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<Cell num={3} />\n\t\t\t\t\t\t<Cell num={4} />\n\t\t\t\t\t\t<Cell num={5} />\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<Cell num={6} />\n\t\t\t\t\t\t<Cell num={7} />\n\t\t\t\t\t\t<Cell num={8} />\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t{winner && (\n\t\t\t\t<>\n\t\t\t\t\t<Modal theWinner={winner} restart={handleRestart} />\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t<button\n                  type=\"button\"\n                  className=\"w-100 inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm\"\n                  onClick={() => handleRestart()}\n                >\n                  Start Over?\n                </button>\n\t\t</div>\n\t);\n};\n\nexport default TicTacToe;\n"]},"metadata":{},"sourceType":"module"}